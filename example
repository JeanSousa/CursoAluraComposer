
// os pacotes tem como padrao o nome do criador ou github / nome pacote
//Package name (<vendor>/<name>) [indb/buscador-cursos-alura]: jeansousa/buscador-cursos

//Description []: Projeto que busca os cursos no projeto da alura

//autor identificado automatico se tiver feito o init do github
//Author [JeanSousa <jeanjr.silvasousa@gmail.com>, n to skip]:

//Minimum Stability []  = se quer buscar pacote que esteja em dev ou estaveis

// Package Type (e.g. library, project, metapackage, composer-plugin) []:
// tipo, se é um projeto que por exemplo é completo uma aplicação, ou uma lib .
// metapackage é um projeto vazio so com um composer json com dependencias
// plugin é um plugin para o composer

//Licence = MIT, APACHE

//Would you like to define your dependencies (require) interactively [yes]? 
//pergunta se quer definir as dependencias do projeto interativamente
//se quiser pode colocar ex: monolog/segundadependencia

//Would you like to define your dev dependencies (require-dev) interactively
//mesma pergunta para as dependencias de desenvolvimento

//pronto 
//ele pede para confirmar a geração do arquivo json com nome, descrição, tipo
//autores e dependencia do projeto
// {
//     "name": "jeansousa/buscador-cursos",
//     "description": "Projeto que busca os cursos no projeto da alura",
//     "type": "library",
//     "authors": [
//         {
//             "name": "JeanSousa",
//             "email": "jeanjr.silvasousa@gmail.com"
//         }
//     ],
//     "require": {}
// }

//PACKAGIST 
//repositório central de todas as dependências do composer 
//mas podemos baixar tambem do github por exemplo ou de um repositorio privado


//COMPOSER INSTALL 
//le o arquivo composer.lock e instala as exatas dependencias la definidas

//COMPOSER UPDATE 
//le o arquivo composer.json instala as dependencias mais atuais dentro das restrições
//definidas e atualiza o composer.lock

//Sendo assim, em um projeto em andamento (tendo o arquivo composer.lock), 
//para instalarmos uma nova dependência precisamos executar o composer require ou 
//após adicionar a dependência no arquivo composer.json executar o comando composer update


//COMPOSER JSON LOCK
//Armazena as dependencias de cada pacote e a versao exata dos pacotes instalados


//AUTOLOAD

 "autoload": {
        "classmap": [
            "./Teste.php"  //mapeia classes que não estao na psr 4, nao possuem namespace
        ],
        "files": [ //mapeia arquivos que contem trechos de codigo ex funcoes mas nao possuem classes
           "./functions.php",
           "./helpers.php"
        ],
        "psr-4": { 
            "Alura\\BuscadorDeCursos\\": "src/" //mapeia seu namespace e diretorio
        }
    }

// CONSEGUIMOS SEPARAR AS DEPENDENCIAS DE PRODUÇÃO E AS DEPENDENCIAS DE DESENVOLVIMENTO

//as dependencias de produção ficam na chave require do composer.json
 "require": {
        "guzzlehttp/guzzle": "^6.5",
        "symfony/dom-crawler": "^4.2",
        "symfony/css-selector": "^5.4"
    },
    // as dependencias de desenvolvimento ficam na chave require-dev do composer.json
    "require-dev": {
        "phpunit/phpunit": "^9.5"
    }

//no ambiente de desenvolvimento para instalar apenas as dependencias de produção e nao
//de desenvolvimento execute
// "composer install --no-dev"




//ARQUIVOS EXECUTAVEIS DAS DEPENDENCIAS

//os arquivos executaveis das dependencias ficam em vendor/bin/


//INSTALANDO PHPCS DE FORMA A SER UMA DEPENDENCIA DE DESENVOLVIMENTO

//ao executar o comando "vendor/bin/phpcs  --standard=PSR12 src"
//ele mostra os erros dos arquivos dentro da pasta src que nao se encaixam na PSR12
// FILE: /var/www/html/Cursos/buscador-cursos-alura/src/Buscador.php
// ----------------------------------------------------------------------
// FOUND 1 ERROR AFFECTING 1 LINE
// ----------------------------------------------------------------------
//  1 | ERROR | [x] Whitespace found at end of line
// ----------------------------------------------------------------------
// PHPCBF CAN FIX THE 1 MARKED SNIFF VIOLATIONS AUTOMATICALLY
// ----------------------------------------------------------------------


//SCRIPTS 
//o script do phpunit eu nao preciso passar o path vendor/bin porque se o comando
//nao existir no sistema operacional ele automaticamente ira procurar na vendor/bin o executavel

 "scripts": {
       "test": "phpunit --colors tests/TestBuscadorDeCursos.php"
  }


//CHECK
//O comando check organiza os comandos a serem executados (comandos scripts criados)
"scripts": {
       "test": "phpunit tests/TestBuscadorDeCursos.php",
       "cs": "phpcs --standard=PSR12 src/",
       "phan": "phan --color --allow-polyfill-parser",
       "check": [
           "@pan",
           "@cs",
           "@test"
       ]
    }

//O COMANDO "composer list" LISTA OS COMANDOS DO COMPOSER INCLUSIVE OS PERSONALIZADOS
//NO ARQUIVO  'composer.json'


//COMANDOS DO SISTEMA COM SCRIPTS
//No arquivo "composer.json" posso criar scripts para rodar comandos que não seja
//de alguma lib instalada, por exemplo uma classe php ou comandos do sistema operacional
 //"scripts": {
   //    "test": "phpunit tests/TestBuscadorDeCursos.php",
   //    "cs": "phpcs --standard=PSR12 src/",
   //    "phan": "phan --color --allow-polyfill-parser",
       "limpa-cache": "rm -rf cache",
   //    "check": [
   //        "@phan",
   //        "@cs",
   //        "@test"
   //    ]
   // },

//commandos php 

"comandox": "Namespace\\Da\\Classe:metodo"


//EVENTOS https://getcomposer.org/doc/articles/scripts.md
//eventos podem ser executados depois de uma ação, por exemplo o evento abaixo é executado
//depois do composer update
 "post-update-cmd": [
           "@test"
       ]


//CRIANDO A VERSAO DO PACOTE 

//Quando crio uma tag "git tag -a v1.0.0" estou indicando a versao da minha biblioteca
//enviando tag "git push origin v1.0.0"
//os numeros da versao significam vMajor.Minor.Patch
// MAJOR version when you make incompatible API changes, (quando as mudancas sao incompativeis)
// MINOR version when you add functionality in a backwards compatible manner, and
// PATCH version when you make backwards compatible bug fixes.


//CONSTRAINTS DE VERSIONAMENTO
//https://getcomposer.org/doc/articles/versions.md#exact-version-constraint
// POSSO DEFINIR NO REQUIRE 

// VERSOES EXATAS: 1.0.2

// RANGE DE VERSOES: (ex da versao 1 até a 2 uso hifem)  1.0 - 2.0 

// POSSO USAR O ASTERISCO PARA INDICAR QUALQUER COISA NO LUGAR:  1.0.*

// O TIL (~) INDICA MAIOR OU IGUAL A VERSAO ATE A PROXIMA: 
// ~1.2 is equivalent to >=1.2 <2.0.0
// ~1.2.3 is equivalent to >=1.2.3 <1.3.0 (especificando todos numeros MAJOR MINOR PATCH)

// O CIRCUNFLEXO (^) SERVE PARA PEGAR DA VERSAO ESPECIFICADA ATE UMA VERSAO MENOR
// QUE A QUEBRA DE VERSÃO, OU SEJA NAO MUDA A MAJOR MANTENDO A COMPATIBILIDADE
// ^1.2.3 is equivalent to >=1.2.3 <2.0.0